# https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def notmath():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal


snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "Dots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "Implies" Ai
\implies
endsnippet

snippet =< "Implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "If and only if" Ai
\iff
endsnippet

snippet mk "Inline math" wA
$${1}$`!p
snip.rv = ''
`$2
endsnippet

snippet dm "Display math" wA
\[
${1:${VISUAL}}
.\]
$0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# a1 becomes a_1
priority 10
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# a_12 becomes a_{12}
priority 10
context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet == "Equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "Does not equal" iA
\neq 
endsnippet

context "math()"
snippet ceil "Ceiling" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "Floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "Parentheses matrix" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "Bracket matrix" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lr< "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "Conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sum "Sum" w
\sum_{i=${1:1}}^{${2:n}} ${3:a_n z^n}
endsnippet

context "math()"
snippet taylor "Taylor series" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "Limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "Product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "Partial derivative" w
\frac{\partial ${1:z}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "Square root" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "Squared" iA
^2
endsnippet

context "math()"
snippet cb "Cubed" iA
^3
endsnippet

context "math()"
snippet tp "To the ... power" iA
^{$1}$0
endsnippet

snippet __ "Subscript" iA
_{$1}$0
endsnippet

snippet ooo "Infinity" iA
\infty
endsnippet

context "math()"
snippet <= "Less than or equal to" iA
\le 
endsnippet

context "math()"
snippet >= "Greater than or equal to" iA
\ge 
endsnippet

context "math()"
snippet EE "Existential quantor" iA
\exists 
endsnippet

context "math()"
snippet AA "Universal quantor" iA
\forall 
endsnippet

# xnn becomes x_n
# works for any combination of letters and numbers
context "math()"
snippet "\b([a-z])([a-z])\2\b" "Letter variable subscript" riA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)[0]`
endsnippet

# xn1 becomes x_{n+1}
# works for any combination of letters and numbers
priority 200
context "math()"
snippet "\b([a-z])([a-z])([1-9])\b" "Letter variable plus 1" riA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`+`!p snip.rv = match.group(3)`}
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet tn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "Nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "Cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet ** "Dot" iA
\cdot 
endsnippet

context "math()"
snippet *** "Dot" iA
\cdots 
endsnippet

context "math()"
snippet norm "Norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "Infinite integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "Right arrow" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "Left right arrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !-> "Maps to" iA
\mapsto 
endsnippet

context "math()"
snippet invs "Inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "Complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "Math \" iA
\setminus
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "Set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet || "Math handlebar" iA
\mid 
endsnippet

context "math()"
snippet cc "Subset" Ai
\subset 
endsnippet

priority 100
context "math()"
snippet nin "Not in" iA
\not\in 
endsnippet

#priority 10
#context "math()"
#snippet in "In" iA
#\in 
#endsnippet

context "math()"
snippet nn "Intersection" iA
\cap 
endsnippet

context "math()"
snippet nnn "Iterative intersection" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet uu "Union" iA
\cup 
endsnippet

context "math()"
snippet uuu "Iterative union" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "Empty set" iA
\emptyset
endsnippet

context "math()"
snippet RR "Real numbers" iA
\mathbb{R}
endsnippet

context "math()"
snippet QQ "Rational numbers" iA
\mathbb{Q}
endsnippet

context "math()"
snippet ZZ "Integer numbers" iA
\mathbb{Z}
endsnippet

context "math()"
snippet NN "Natural numbers" iA
\mathbb{N}
endsnippet

context "math()"
snippet <! "Left triangle" iA
\triangleleft 
endsnippet

context "math()"
snippet <> "Diamond" iA
\diamond 
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "notmath()"
snippet fun "Function" i
$$1: $2 \longmapsto $3$
endsnippet

context "math()"
snippet fun "Function" i
$1: $2 \longmapsto $3
endsnippet

snippet bigfun "Big function" i
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

context "math()"
snippet cvec "Column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "Bar" riA
\overline{$1}$0
endsnippet

# add bar postfix, like pronounced (e.g. abar)
priority 100
context "math()"
snippet "([a-zA-Z])bar" "Postfix bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "Hat" riA
\hat{$1}$0
endsnippet

# add hat postfix, like pronounced (e.g. khat)
priority 100
context "math()"
snippet "([a-zA-Z])hat" "Postfix hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# vector (v,. or v.,)
context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Postfix vector" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

# turn single letter words into math mode (i, I, a, A excluded).
context "notmath()"
snippet "(\b[b-hj-zB-HJ-Z]\b)([., ])" "Variable in text" riA
$`!p snip.rv=match.group(1)[0]`$`!p snip.rv=match.group(2)`$0
endsnippet

# vim:ft=snippets
